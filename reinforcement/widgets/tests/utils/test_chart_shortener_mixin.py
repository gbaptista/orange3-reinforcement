from math import isnan
import numpy as np

from ...utils.chart_shortener_mixin import ChartShortenerMixin


def test_shorten_points():
    class GenericClass(ChartShortenerMixin):
        pass

    generic_class = GenericClass()

    results = np.arange(0, 100)

    max_points = 10

    short_results = generic_class.shorten_points(results, max_points)

    expected_values = {0: 0, 7: 7., 20: 20., 33: 33., 46: 46., 59: 59.,
                       72: 72., 85: 85., 95: 94.5, 99: 99}

    assert len(short_results) == max_points
    assert short_results == expected_values
    assert not any(isnan(short_results[x]) for x in short_results)

    short_results = generic_class.shorten_points(results, max_points, False)

    expected_values = {5: 4.5, 15: 14.5, 25: 24.5, 35: 34.5, 45: 44.5,
                       55: 54.5, 65: 64.5, 75: 74.5, 85: 84.5, 94: 94.}

    assert len(short_results) == max_points
    assert short_results == expected_values
    assert not any(isnan(short_results[x]) for x in short_results)

    results = np.array([
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 153., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 176., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 96., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 155., 200.,
        200., 200., 200., 149., 200., 155., 200., 97., 200., 200., 65., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 117., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 183., 200., 200., 200., 200., 200.,
        97., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 26., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 148., 200., 200., 200., 13., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 74., 200., 200., 112., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
        200.])

    max_points = 200

    short_results = generic_class.shorten_points(results, max_points, False)

    assert len(results) == 300

    assert not any(isnan(short_results[x]) for x in short_results)
    assert len(short_results) < max_points
    assert len(short_results) > 100

    expected_values = {1: 200., 3: 200., 5: 200., 7: 200., 9: 200., 11: 200.,
                       13: 200., 15: 200., 17: 200., 19: 200., 21: 200.,
                       23: 176.5, 25: 200., 27: 200., 29: 200., 31: 200.,
                       33: 200., 35: 200., 37: 200., 39: 200., 41: 200.,
                       43: 200., 45: 200., 47: 188., 49: 200., 51: 200.,
                       53: 200., 55: 200., 57: 200., 59: 200., 61: 200.,
                       63: 200., 65: 200., 67: 200., 69: 200., 71: 200.,
                       73: 200., 75: 200., 77: 200., 79: 200., 81: 200.,
                       83: 200., 85: 200., 87: 200., 89: 200., 91: 200.,
                       93: 148., 95: 200., 97: 200., 99: 200., 101: 200.,
                       103: 200., 105: 200., 107: 200., 109: 200., 111: 200.,
                       113: 200., 115: 200., 117: 200., 119: 177.5, 121: 200.,
                       123: 174.5, 125: 177.5, 127: 148.5, 129: 200.,
                       131: 132.5, 133: 200., 135: 200., 137: 200., 139: 200.,
                       141: 200., 143: 200., 145: 200., 147: 200., 149: 200.,
                       151: 200., 153: 200., 155: 200., 157: 200., 159: 200.,
                       161: 200., 163: 200., 165: 200., 167: 158.5, 169: 200.,
                       171: 200., 173: 200., 175: 200., 177: 200., 179: 200.,
                       181: 200., 183: 200., 185: 200., 187: 191.5, 189: 200.,
                       191: 200., 193: 148.5, 195: 200., 197: 200., 199: 200.,
                       201: 200., 203: 200., 205: 200., 207: 200., 209: 200.,
                       211: 200., 213: 200., 215: 200., 217: 200., 219: 200.,
                       221: 200., 223: 200., 225: 113., 227: 200., 229: 200.,
                       231: 200., 233: 200., 235: 200., 237: 200., 239: 200.,
                       241: 200., 243: 174., 245: 200., 247: 106.5, 249: 200.,
                       251: 200., 253: 200., 255: 200., 257: 200., 259: 200.,
                       261: 200., 263: 200., 265: 137., 267: 200., 269: 156.,
                       271: 200., 273: 200., 275: 200., 277: 200., 279: 200.,
                       281: 200., 283: 200., 285: 200., 287: 200., 289: 200.,
                       291: 200., 293: 200., 295: 200., 297: 200., 298: 200.,
                       299: 200.}

    assert short_results == expected_values
